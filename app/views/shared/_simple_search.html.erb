<%
  # Render as follows:
  #
  #   render( :partial => 'shared/simple_search' )
  #
  # ...for any model which can be derived from the current controller's name
  # and which defines constant SEARCH_COLUMNS to an array of column names
  # (without locale suffices) listing the columns which are to be searchable.
  #
  # Optionally define local "model" to the model to use (e.g. User), else the
  # value of "controller.controller_name.classify.constantize" is used.
  #
  # If Leightbox is in use, the search partial will hide itself within a
  # Leightbox wrapper and the caller should also render "leightbox_button" to
  # provide access to it. However, the partial is smart; in the event that no
  # results are generated by a given search, hiding the search panel is rather
  # counter-intuitive. Most list views in practice don't render related buttons
  # with empty lists either, so without lots of additional conditional logic in
  # views, this hiding behaviour becomes very unhelpful. Thus the partial will
  # not hide itself inside a Leightbox popup container if a search query exists
  # but no results were found, so the 'errant' search criteria end up shown
  # directly in the page.

 if defined?( model ).nil?
   model = controller.controller_name.classify.constantize
 end

 trans  = model.respond_to?( :columns_for_translation )
 fields = model::SEARCH_COLUMNS
 first  = true

-%>
<% unless ( @items.empty? && @search_results == false ) -%>

<div id="search_container">
<%
     # If QuietLeightbox says 'yes', then in theory we can use a JavaScript
     # based popup by altering the containing DIVs class and ID. Do this change
     # with JavaScript itself, so that non-JS browsers will still use the non-JS
     # version of the markup.

     if ( using_quiet_leightbox? )
       javascript_tag do
%>
    try
    {
      var divElement       = document.getElementById( 'search_container' );
<%     if ( @items.empty? ) -%>
      divElement.className = 'floaty_clear';
<%     else -%>
      divElement.className = 'leightbox';
      divElement.id        = 'leightbox_simple_search';
<%     end -%>
    }
    catch( e ) { /* Ignore */ }
<%
       end
     end
%>
  <p />
  <div class="simple_search round">
    <h2><%= t( :'uk.org.pond.canvass.search.title' ) %></h2>

    <% form_tag ( root_url().chop() + request.path() ), :method => 'get' do %>
<%   if ( controller_name == "messages" && params.has_key?( :sent ) ) -%>
      <%=
        hidden_field_tag( :sent, 'true' ) # Nasty special case; keep "sent" parameter for Sent Messages searches
      %>
<%   end -%>
      <table class="no_border">
<%
       fields.each do | field |

         # Fields with a "#" inside have a method name to call to generate the
         # form data.

         array = field.split( '#' )

         if ( array.size > 1 )
           field            = array.first
           generator_method = array.last
         else
           generator_method = nil
         end

         trans_field = trans ? model.translated_column( field ) : field
         entry_id    = "s_#{ trans_field }".to_sym
         radio_id    = "sr_#{ trans_field }".to_sym
-%>
        <tr>
<%
         if ( first == true )
           first = false
-%>
          <td align="right" colspan="2">
<%       else -%>
          <td align="left">
            <em>
              <%= radio_button_tag( radio_id, :and, params[ radio_id ] != "or" ) %><%= label_tag( "#{ radio_id }_and", t( :'uk.org.pond.canvass.search.and' ) ) %>
              <%= radio_button_tag( radio_id, :or,  params[ radio_id ] == "or" ) %><%= label_tag( "#{ radio_id }_or",  t( :'uk.org.pond.canvass.search.or'  ) ) %>
            </em>
          </td>
          <td align="right">
<%       end -%>
            <% content_tag :label do %>
              <strong><%= model.human_attribute_name( field ) %></strong>
<%       if ( generator_method.nil? ) -%>
              <%= text_field_tag entry_id, params[ entry_id ] %>
<%       else -%>
              <%= send( generator_method, entry_id, params[ entry_id ] ) %>
<%       end -%>
            <% end %>
          </td>
        </tr>
<%     end -%>
        <tr>
          <td colspan="2" align="right">
            <div class="buttons">
<%= apphelp_submit( nil, t( :'uk.org.pond.canvass.search.start' ), '              ' ) %>
              <%=
                apphelp_protected_button_to(
                  :index,
                  {
                    :url     => root_url().chop() + request.path(),
                    :text    => t( :'uk.org.pond.canvass.search.cancel' ),
                    :variant => :negative,
                    :bypass  => true
                  }
                )
              %>
            </div>
          </td>
        </tr>
      </table>
    <% end %>
  </div>
<%
     # Only if we are in theory able to use the JavaScript driven popup should a
     # 'close' link be present and write this itself with JavaScript, so non-JS
     # browsers fall back to showing nothing here - the desired result as the
     # search panel will be rendered inline in those cases (see earlier).
     #
     # The inline script deliberately uses DOM methods rather than something as
     # simple as 'document.write', to try and make sure that the level of JS
     # support, if there is any, is sufficient.

     if ( using_quiet_leightbox? && ! @items.empty? )
       javascript_tag do
-%>
     try
     {
       var aElement         = document.createElement( 'a' );
       aElement.href        = '#';
       aElement.className   = 'lbAction';
       aElement.rel         = 'deactivate';
       aElement.innerHTML   = "<%= json_escape( t( :'uk.org.pond.canvass.search.close' ) ).gsub( '"', '\"' ) %>";

       divElement.appendChild( aElement );
     }
     catch( e ) { /* Ignore */ }
<%
       end
     end
-%>
</div>
<% end -%>